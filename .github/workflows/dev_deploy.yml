name: Docker CI/CD Pipeline
on:
  push:
    branches: [ develop ]
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Make application.yml
        run: |
          cd ./src/main/resources
          echo "${{ secrets.APPLICATION_YML }}" > ./application.yml
        shell: bash

      - name: Create empty application-dev.yml
        run: |
          cd ./src/main/resources
          touch application-dev.yml
        shell: bash

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        uses: gradle/gradle-build-action@v2
        with:
          arguments: build

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/duckmealng:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Copy Dockerfile to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
        run: |
          echo "$EC2_SSH_KEY" > private_key.pem
          chmod 600 private_key.pem
          scp -i private_key.pem -o StrictHostKeyChecking=no Dockerfile $EC2_USERNAME@$EC2_HOST:/home/$EC2_USERNAME/

      - name: Deploy to EC2
        env:
          EC2_SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
          EC2_USERNAME: ${{ secrets.EC2_USERNAME }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          DOCKER_IMAGE: ${{ secrets.DOCKER_USERNAME }}/duckmealng:latest
        run: |
          ssh -i private_key.pem -o StrictHostKeyChecking=no $EC2_USERNAME@$EC2_HOST "
            # Docker 로그인
            echo '${{ secrets.DOCKER_PASSWORD }}' | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
          
            # 최신 이미지 가져오기
            sudo docker pull ${DOCKER_IMAGE}
          
            # 실행 중인 컨테이너 종료
            sudo docker stop duckmealng-container || true
            sudo docker rm duckmealng-container || true
          
            # 새 컨테이너 실행
            sudo docker run -d \
              --name duckmealng-container \
              -p 8080:8080 \
              --restart unless-stopped \
              ${DOCKER_IMAGE}
          
            # 사용하지 않는 이미지 정리
            sudo docker image prune -af
          "
          rm -f private_key.pem